# Environment Variables Template
# Copy this file to .env and fill in your actual values

# Required for session storage (local or remote Redis instance)
# For local development, you can use: redis://localhost:6379
# For production, use your Redis provider's connection string
REDIS_URL="redis://username:password@host:port"

# REQUIRED: Default GraphQL API endpoint (SECURITY: This is the only endpoint allowed)
# For security reasons, all requests are restricted to this endpoint only
# User-provided URLs are ignored to prevent SSRF attacks
# Example public APIs you can test with:
DEFAULT_GRAPHQL_ENDPOINT="http://localhost:4000/graphql"

# Optional: Default headers for the GraphQL API
# These headers will be sent with every request to the DEFAULT_GRAPHQL_ENDPOINT
# if no specific headers are provided by the client when starting a session
# This is useful for setting up authentication tokens (e.g., Bearer tokens, API keys)
# The value MUST be a valid JSON string

# Example for a Bearer token:
# DEFAULT_GRAPHQL_HEADERS='{"Authorization": "Bearer YOUR_VERY_SECRET_API_KEY"}'

# Example for an API key header (e.g., x-api-key):
# DEFAULT_GRAPHQL_HEADERS='{"x-api-key": "YOUR_API_KEY_VALUE"}'

# Example for multiple headers:
# DEFAULT_GRAPHQL_HEADERS='{"Authorization": "Bearer YOUR_TOKEN", "x-custom-header": "value"}'

# Note: REDIS_URL is required for session storage. The server will not function without Redis.

# Redis reliability tuning (Optional)
# Increase connection and readiness timeouts and operation retries
# Defaults shown are tuned for flaky networks
REDIS_CONNECT_TIMEOUT_MS=100000
REDIS_READY_MAX_WAIT_MS=100000
REDIS_OPERATION_MAX_ATTEMPTS=10
REDIS_OPERATION_RETRY_MS=1000

# Rate Limiting Configuration (Optional)
# These settings control how many requests clients can make within specified time windows
# All time windows are in milliseconds, all limits are number of requests

# Global rate limit - applies to all requests across all clients
# RATE_LIMIT_GLOBAL_WINDOW_MS=60000
# RATE_LIMIT_GLOBAL_MAX_REQUESTS=2000

# Per-client rate limit - applies to each individual client
# RATE_LIMIT_CLIENT_WINDOW_MS=60000
# RATE_LIMIT_CLIENT_MAX_REQUESTS=50

# Expensive operations rate limit - applies to resource-intensive operations like query execution
# RATE_LIMIT_EXPENSIVE_WINDOW_MS=60000
# RATE_LIMIT_EXPENSIVE_MAX_REQUESTS=10

# Schema operations rate limit - applies to schema introspection (very restrictive)
# RATE_LIMIT_SCHEMA_WINDOW_MS=300000
# RATE_LIMIT_SCHEMA_MAX_REQUESTS=5 
